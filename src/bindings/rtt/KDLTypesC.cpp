// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:291


#include "KDLTypesC.h"
#include "tao/CDR.h"
#include "tao/Null_RefCount_Policy.h"
#include "tao/TypeCode_Constants.h"
#include "tao/Alias_TypeCode_Static.h"
#include "tao/Sequence_TypeCode_Static.h"
#include "tao/Struct_TypeCode_Static.h"
#include "tao/TypeCode_Struct_Field.h"
#include "tao/Any_Dual_Impl_T.h"

#if defined (__BORLANDC__)
#pragma option -w-rvl -w-rch -w-ccc -w-aus -w-sig
#endif /* __BORLANDC__ */

#if !defined (__ACE_INLINE__)
#include "KDLTypesC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:70

// Arg traits specializations.
namespace TAO
{
}


// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_KDL_CORBA_DOUBLESEQUENCE_CS_)
#define _KDL_CORBA_DOUBLESEQUENCE_CS_

KDL::Corba::DoubleSequence::DoubleSequence (void)
{}

KDL::Corba::DoubleSequence::DoubleSequence (
    CORBA::ULong max
  )
  : TAO_Unbounded_Sequence<
        CORBA::Double
      >
    (max)
{}

KDL::Corba::DoubleSequence::DoubleSequence (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Double * buffer,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Sequence<
        CORBA::Double
      >
    (max, length, buffer, release)
{}

KDL::Corba::DoubleSequence::DoubleSequence (
    const DoubleSequence &seq
  )
  : TAO_Unbounded_Sequence<
        CORBA::Double
      >
    (seq)
{}

KDL::Corba::DoubleSequence::~DoubleSequence (void)
{}

void KDL::Corba::DoubleSequence::_tao_any_destructor (
    void * _tao_void_pointer
  )
{
  DoubleSequence * _tao_tmp_pointer =
    static_cast<DoubleSequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:937


#ifndef _TAO_TYPECODE_KDL_Corba_DoubleSequence_GUARD
#define _TAO_TYPECODE_KDL_Corba_DoubleSequence_GUARD
namespace TAO
{
  namespace TypeCode
  {
    TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
      KDL_Corba_DoubleSequence_0 (
        CORBA::tk_sequence,
        &CORBA::_tc_double,
        0U);
      
    ::CORBA::TypeCode_ptr const tc_KDL_Corba_DoubleSequence_0 =
      &KDL_Corba_DoubleSequence_0;
    
  }
}


#endif /* _TAO_TYPECODE_KDL_Corba_DoubleSequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_KDL_Corba_DoubleSequence (
    CORBA::tk_alias,
    "IDL:KDL/Corba/DoubleSequence:1.0",
    "DoubleSequence",
    &TAO::TypeCode::tc_KDL_Corba_DoubleSequence_0);
  
namespace KDL
{
  namespace Corba
  {
    ::CORBA::TypeCode_ptr const _tc_DoubleSequence =
      &_tao_tc_KDL_Corba_DoubleSequence;
  }
}



// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:89

static TAO::TypeCode::Struct_Field<char const *, CORBA::TypeCode_ptr const *> const _tao_fields_KDL_Corba_vector[] =
  {
    { "x", &CORBA::_tc_double },
    { "y", &CORBA::_tc_double },
    { "z", &CORBA::_tc_double }
    
  };
static TAO::TypeCode::Struct<char const *,
                      CORBA::TypeCode_ptr const *,
                      TAO::TypeCode::Struct_Field<char const *, CORBA::TypeCode_ptr const *> const *,
                      TAO::Null_RefCount_Policy>
  _tao_tc_KDL_Corba_vector (
    CORBA::tk_struct,
    "IDL:KDL/Corba/vector:1.0",
    "vector",
    _tao_fields_KDL_Corba_vector,
    3);
  
namespace KDL
{
  namespace Corba
  {
    ::CORBA::TypeCode_ptr const _tc_vector =
      &_tao_tc_KDL_Corba_vector;
  }
}



// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:66

void 
KDL::Corba::vector::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  vector *_tao_tmp_pointer =
    static_cast<vector *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:89

static TAO::TypeCode::Struct_Field<char const *, CORBA::TypeCode_ptr const *> const _tao_fields_KDL_Corba_rotation[] =
  {
    { "Xx", &CORBA::_tc_double },
    { "Xy", &CORBA::_tc_double },
    { "Xz", &CORBA::_tc_double },
    { "Yx", &CORBA::_tc_double },
    { "Yy", &CORBA::_tc_double },
    { "Yz", &CORBA::_tc_double },
    { "Zx", &CORBA::_tc_double },
    { "Zy", &CORBA::_tc_double },
    { "Zz", &CORBA::_tc_double }
    
  };
static TAO::TypeCode::Struct<char const *,
                      CORBA::TypeCode_ptr const *,
                      TAO::TypeCode::Struct_Field<char const *, CORBA::TypeCode_ptr const *> const *,
                      TAO::Null_RefCount_Policy>
  _tao_tc_KDL_Corba_rotation (
    CORBA::tk_struct,
    "IDL:KDL/Corba/rotation:1.0",
    "rotation",
    _tao_fields_KDL_Corba_rotation,
    9);
  
namespace KDL
{
  namespace Corba
  {
    ::CORBA::TypeCode_ptr const _tc_rotation =
      &_tao_tc_KDL_Corba_rotation;
  }
}



// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:66

void 
KDL::Corba::rotation::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  rotation *_tao_tmp_pointer =
    static_cast<rotation *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:89

static TAO::TypeCode::Struct_Field<char const *, CORBA::TypeCode_ptr const *> const _tao_fields_KDL_Corba_frame[] =
  {
    { "p", &KDL::Corba::_tc_vector },
    { "M", &KDL::Corba::_tc_rotation }
    
  };
static TAO::TypeCode::Struct<char const *,
                      CORBA::TypeCode_ptr const *,
                      TAO::TypeCode::Struct_Field<char const *, CORBA::TypeCode_ptr const *> const *,
                      TAO::Null_RefCount_Policy>
  _tao_tc_KDL_Corba_frame (
    CORBA::tk_struct,
    "IDL:KDL/Corba/frame:1.0",
    "frame",
    _tao_fields_KDL_Corba_frame,
    2);
  
namespace KDL
{
  namespace Corba
  {
    ::CORBA::TypeCode_ptr const _tc_frame =
      &_tao_tc_KDL_Corba_frame;
  }
}



// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:66

void 
KDL::Corba::frame::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  frame *_tao_tmp_pointer =
    static_cast<frame *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:89

static TAO::TypeCode::Struct_Field<char const *, CORBA::TypeCode_ptr const *> const _tao_fields_KDL_Corba_wrench[] =
  {
    { "force", &KDL::Corba::_tc_vector },
    { "torque", &KDL::Corba::_tc_rotation }
    
  };
static TAO::TypeCode::Struct<char const *,
                      CORBA::TypeCode_ptr const *,
                      TAO::TypeCode::Struct_Field<char const *, CORBA::TypeCode_ptr const *> const *,
                      TAO::Null_RefCount_Policy>
  _tao_tc_KDL_Corba_wrench (
    CORBA::tk_struct,
    "IDL:KDL/Corba/wrench:1.0",
    "wrench",
    _tao_fields_KDL_Corba_wrench,
    2);
  
namespace KDL
{
  namespace Corba
  {
    ::CORBA::TypeCode_ptr const _tc_wrench =
      &_tao_tc_KDL_Corba_wrench;
  }
}



// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:66

void 
KDL::Corba::wrench::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  wrench *_tao_tmp_pointer =
    static_cast<wrench *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:89

static TAO::TypeCode::Struct_Field<char const *, CORBA::TypeCode_ptr const *> const _tao_fields_KDL_Corba_twist[] =
  {
    { "vel", &KDL::Corba::_tc_vector },
    { "rot", &KDL::Corba::_tc_rotation }
    
  };
static TAO::TypeCode::Struct<char const *,
                      CORBA::TypeCode_ptr const *,
                      TAO::TypeCode::Struct_Field<char const *, CORBA::TypeCode_ptr const *> const *,
                      TAO::Null_RefCount_Policy>
  _tao_tc_KDL_Corba_twist (
    CORBA::tk_struct,
    "IDL:KDL/Corba/twist:1.0",
    "twist",
    _tao_fields_KDL_Corba_twist,
    2);
  
namespace KDL
{
  namespace Corba
  {
    ::CORBA::TypeCode_ptr const _tc_twist =
      &_tao_tc_KDL_Corba_twist;
  }
}



// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:66

void 
KDL::Corba::twist::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  twist *_tao_tmp_pointer =
    static_cast<twist *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from 
// be/be_visitor_sequence/any_op_cs.cpp:54


// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const KDL::Corba::DoubleSequence &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<KDL::Corba::DoubleSequence>::insert_copy (
      _tao_any,
      KDL::Corba::DoubleSequence::_tao_any_destructor,
      TAO::TypeCode::tc_KDL_Corba_DoubleSequence_0,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    KDL::Corba::DoubleSequence *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<KDL::Corba::DoubleSequence>::insert (
      _tao_any,
      KDL::Corba::DoubleSequence::_tao_any_destructor,
      TAO::TypeCode::tc_KDL_Corba_DoubleSequence_0,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    KDL::Corba::DoubleSequence *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const KDL::Corba::DoubleSequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const KDL::Corba::DoubleSequence *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<KDL::Corba::DoubleSequence>::extract (
        _tao_any,
        KDL::Corba::DoubleSequence::_tao_any_destructor,
        TAO::TypeCode::tc_KDL_Corba_DoubleSequence_0,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const KDL::Corba::vector &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<KDL::Corba::vector>::insert_copy (
      _tao_any,
      KDL::Corba::vector::_tao_any_destructor,
      KDL::Corba::_tc_vector,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    KDL::Corba::vector *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<KDL::Corba::vector>::insert (
      _tao_any,
      KDL::Corba::vector::_tao_any_destructor,
      KDL::Corba::_tc_vector,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    KDL::Corba::vector *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const KDL::Corba::vector *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const KDL::Corba::vector *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<KDL::Corba::vector>::extract (
        _tao_any,
        KDL::Corba::vector::_tao_any_destructor,
        KDL::Corba::_tc_vector,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const KDL::Corba::rotation &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<KDL::Corba::rotation>::insert_copy (
      _tao_any,
      KDL::Corba::rotation::_tao_any_destructor,
      KDL::Corba::_tc_rotation,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    KDL::Corba::rotation *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<KDL::Corba::rotation>::insert (
      _tao_any,
      KDL::Corba::rotation::_tao_any_destructor,
      KDL::Corba::_tc_rotation,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    KDL::Corba::rotation *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const KDL::Corba::rotation *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const KDL::Corba::rotation *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<KDL::Corba::rotation>::extract (
        _tao_any,
        KDL::Corba::rotation::_tao_any_destructor,
        KDL::Corba::_tc_rotation,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const KDL::Corba::frame &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<KDL::Corba::frame>::insert_copy (
      _tao_any,
      KDL::Corba::frame::_tao_any_destructor,
      KDL::Corba::_tc_frame,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    KDL::Corba::frame *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<KDL::Corba::frame>::insert (
      _tao_any,
      KDL::Corba::frame::_tao_any_destructor,
      KDL::Corba::_tc_frame,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    KDL::Corba::frame *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const KDL::Corba::frame *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const KDL::Corba::frame *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<KDL::Corba::frame>::extract (
        _tao_any,
        KDL::Corba::frame::_tao_any_destructor,
        KDL::Corba::_tc_frame,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const KDL::Corba::wrench &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<KDL::Corba::wrench>::insert_copy (
      _tao_any,
      KDL::Corba::wrench::_tao_any_destructor,
      KDL::Corba::_tc_wrench,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    KDL::Corba::wrench *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<KDL::Corba::wrench>::insert (
      _tao_any,
      KDL::Corba::wrench::_tao_any_destructor,
      KDL::Corba::_tc_wrench,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    KDL::Corba::wrench *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const KDL::Corba::wrench *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const KDL::Corba::wrench *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<KDL::Corba::wrench>::extract (
        _tao_any,
        KDL::Corba::wrench::_tao_any_destructor,
        KDL::Corba::_tc_wrench,
        _tao_elem
      );
}

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:54

// Copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    const KDL::Corba::twist &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<KDL::Corba::twist>::insert_copy (
      _tao_any,
      KDL::Corba::twist::_tao_any_destructor,
      KDL::Corba::_tc_twist,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    CORBA::Any &_tao_any,
    KDL::Corba::twist *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<KDL::Corba::twist>::insert (
      _tao_any,
      KDL::Corba::twist::_tao_any_destructor,
      KDL::Corba::_tc_twist,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    KDL::Corba::twist *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const KDL::Corba::twist *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
CORBA::Boolean operator>>= (
    const CORBA::Any &_tao_any,
    const KDL::Corba::twist *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<KDL::Corba::twist>::extract (
        _tao_any,
        KDL::Corba::twist::_tao_any_destructor,
        KDL::Corba::_tc_twist,
        _tao_elem
      );
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96

#if !defined _TAO_CDR_OP_KDL_Corba_DoubleSequence_CPP_
#define _TAO_CDR_OP_KDL_Corba_DoubleSequence_CPP_

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const KDL::Corba::DoubleSequence &_tao_sequence
  )
{
  const CORBA::ULong _tao_seq_len = _tao_sequence.length ();
  
  if (strm << _tao_seq_len)
    {
      // Encode all elements.
      return strm.write_double_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    }
  
  return false;
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    KDL::Corba::DoubleSequence &_tao_sequence
  )
{
  CORBA::ULong _tao_seq_len;
  
  if (strm >> _tao_seq_len)
    {
      // Add a check to the length of the sequence
      // to make sure it does not exceed the length
      // of the stream. (See bug 58.)
      if (_tao_seq_len > strm.length ())
        {
          return false;
        }
      
      // Set the length of the sequence.
      _tao_sequence.length (_tao_seq_len);
      
      // If length is 0 we return true.
      if (0 >= _tao_seq_len) 
        {
          return true;
        }
      
      // Retrieve all the elements.
      return strm.read_double_array (_tao_sequence.get_buffer (), _tao_sequence.length ());
    
    }
  
  return false;
}

#endif /* _TAO_CDR_OP_KDL_Corba_DoubleSequence_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const KDL::Corba::vector &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.x) &&
    (strm << _tao_aggregate.y) &&
    (strm << _tao_aggregate.z);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    KDL::Corba::vector &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.x) &&
    (strm >> _tao_aggregate.y) &&
    (strm >> _tao_aggregate.z);
}

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const KDL::Corba::rotation &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.Xx) &&
    (strm << _tao_aggregate.Xy) &&
    (strm << _tao_aggregate.Xz) &&
    (strm << _tao_aggregate.Yx) &&
    (strm << _tao_aggregate.Yy) &&
    (strm << _tao_aggregate.Yz) &&
    (strm << _tao_aggregate.Zx) &&
    (strm << _tao_aggregate.Zy) &&
    (strm << _tao_aggregate.Zz);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    KDL::Corba::rotation &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.Xx) &&
    (strm >> _tao_aggregate.Xy) &&
    (strm >> _tao_aggregate.Xz) &&
    (strm >> _tao_aggregate.Yx) &&
    (strm >> _tao_aggregate.Yy) &&
    (strm >> _tao_aggregate.Yz) &&
    (strm >> _tao_aggregate.Zx) &&
    (strm >> _tao_aggregate.Zy) &&
    (strm >> _tao_aggregate.Zz);
}

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const KDL::Corba::frame &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.p) &&
    (strm << _tao_aggregate.M);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    KDL::Corba::frame &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.p) &&
    (strm >> _tao_aggregate.M);
}

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const KDL::Corba::wrench &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.force) &&
    (strm << _tao_aggregate.torque);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    KDL::Corba::wrench &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.force) &&
    (strm >> _tao_aggregate.torque);
}

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:61

CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const KDL::Corba::twist &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.vel) &&
    (strm << _tao_aggregate.rot);
}

CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    KDL::Corba::twist &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.vel) &&
    (strm >> _tao_aggregate.rot);
}
